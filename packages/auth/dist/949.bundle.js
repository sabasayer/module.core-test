(globalThis.webpackChunkauth=globalThis.webpackChunkauth||[]).push([[949],{6863:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(8878);e.ExtendArray=n.ExtendArray;var o=r(4610);e.PositionCalculaterUtil=o.PositionCalculaterUtil;var i=r(1204);e.DataTrackerUtil=i.DataTrackerUtil;var a=r(4192);e.BrowserLanguageUtil=a.BrowserLanguageUtil;var u=r(8261);e.SessionStorageUtil=u.SessionStorageUtil,e.LocalStorageUtil=u.LocalStorageUtil,e.BrowserStorageUtil=u.BrowserStorageUtil;var c=r(638);e.CacheUtil=c.CacheUtil;var s=r(9200);e.EnumCacheType=s.EnumCacheType;var l=r(8898);e.cache=l.cache,e.cacheToIndexedDB=l.cacheToIndexedDB,e.cacheToLocalStorage=l.cacheToLocalStorage,e.cacheToMemory=l.cacheToMemory,e.cacheToSessionStorage=l.cacheToSessionStorage;var f=r(8859);e.DataGroupUtil=f.DataGroupUtil;var h=r(5545);e.DateUtil=h.DateUtil;var p=r(6256);e.DecimalUtil=p.DecimalUtil;var d=r(6162);e.DomUtil=d.DomUtil;var g=r(4482);e.FilterUtil=g.FilterUtil;var y=r(8350);e.mapTo=y.mapTo,e.mapToArray=y.mapToArray;var v=r(3252);e.SortUtil=v.SortUtil;var m=r(8932);e.UuidUtil=m.UuidUtil;var b=r(4340);e.InputUtil=b.InputUtil;var w=r(2253);e.EnumKeyboardKey=w.EnumKeyboardKey},4192:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.getBrowserLang=function(){return navigator?(null!=navigator.languages?navigator.languages[0]:navigator.language).toLowerCase():""},t}();e.BrowserLanguageUtil=r},8261:function(t,e){"use strict";var r,n=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){}return t.isSupported=function(){try{var t="__some_random_key_you_are_not_going_to_use__";return this.storage.setItem(t,t),this.storage.removeItem(t),!0}catch(t){return!1}},t.clear=function(){this.isSupported()?this.storage.clear():this.inMemoryStorage={}},t.getItem=function(t){return this.isSupported()?this.storage.getItem(t):this.inMemoryStorage.hasOwnProperty(t)?this.inMemoryStorage[t]:null},t.key=function(t){return this.isSupported()?this.storage.key(t):Object.keys(this.inMemoryStorage)[t]||null},t.removeItem=function(t){this.isSupported()?this.storage.removeItem(t):delete this.inMemoryStorage[t]},t.setItem=function(t,e){this.isSupported()?this.storage.setItem(t,e):this.inMemoryStorage[t]=e},t.storage=window.sessionStorage,t.inMemoryStorage={},t}();e.BrowserStorageUtil=o;var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.storage=window.sessionStorage,e}(o);e.SessionStorageUtil=i;var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.storage=window.localStorage,e}(o);e.LocalStorageUtil=a},9200:(t,e)=>{"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),(r=e.EnumCacheType||(e.EnumCacheType={}))[r.Memory=1]="Memory",r[r.SessionStorage=2]="SessionStorage",r[r.LocalStorage=3]="LocalStorage",r[r.IndexedDB=4]="IndexedDB"},8898:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(9200),o=r(638);e.cache=function(t){return o.CacheUtil.cache(t)},e.cacheToMemory=function(){return o.CacheUtil.cache(n.EnumCacheType.Memory)},e.cacheToLocalStorage=function(){return o.CacheUtil.cache(n.EnumCacheType.LocalStorage)},e.cacheToSessionStorage=function(){return o.CacheUtil.cache(n.EnumCacheType.SessionStorage)},e.cacheToIndexedDB=function(){return o.CacheUtil.cache(n.EnumCacheType.IndexedDB)}},638:function(t,e,r){"use strict";var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function u(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,u)}c((n=n.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(8261),a=r(9200),u=function(){function t(){}return t.addToCache=function(e,r,n){if(null!=n)switch(e){case a.EnumCacheType.Memory:t.addToMemory(r,n);break;case a.EnumCacheType.SessionStorage:t.addToSessionStorage(r,n);break;case a.EnumCacheType.LocalStorage:t.addToLocalStorage(r,n);break;case a.EnumCacheType.IndexedDB:}},t.getFromCache=function(e,r){switch(e){case a.EnumCacheType.Memory:return t.getFromMemory(r);case a.EnumCacheType.SessionStorage:return t.getFromSessionStorage(r);case a.EnumCacheType.LocalStorage:return t.getFromLocalStorage(r);case a.EnumCacheType.IndexedDB:}},t.clearCache=function(e,r){switch(e){case a.EnumCacheType.Memory:return t.clearMemory(r);case a.EnumCacheType.SessionStorage:return t.clearSessionStorage(r);case a.EnumCacheType.LocalStorage:return t.clearLocalStorage(r);case a.EnumCacheType.IndexedDB:}},t.cache=function(e){return function(r,i,a){var u=a.value;return a.value=function(){for(var a=[],c=0;c<arguments.length;c++)a[c]=arguments[c];return n(this,void 0,void 0,(function(){var n,c,s;return o(this,(function(o){switch(o.label){case 0:return n=a.reduce((function(t,e){return t+"_"+JSON.stringify(e)}),""),n=r.name+"_"+i.toString()+"_"+n,(c=t.getFromCache(e,n))?[2,c]:[4,u.apply(this,a)];case 1:return s=o.sent(),t.addToCache(e,n,s),[2,s]}}))}))},a}},t.data={},t.addToMemory=function(e,r){return t.data[e]=r},t.getFromMemory=function(e){return t.data[e]},t.clearMemory=function(e){return delete t.data[e]},t.addToLocalStorage=function(t,e){return i.LocalStorageUtil.setItem(t,JSON.stringify(e))},t.getFromLocalStorage=function(t){var e=i.LocalStorageUtil.getItem(t);return e?JSON.parse(e):null},t.clearLocalStorage=function(t){i.LocalStorageUtil.removeItem(t)},t.addToSessionStorage=function(t,e){return i.SessionStorageUtil.setItem(t,JSON.stringify(e))},t.getFromSessionStorage=function(t){var e=i.SessionStorageUtil.getItem(t);return e?JSON.parse(e):null},t.clearSessionStorage=function(t){i.SessionStorageUtil.removeItem(t)},t}();e.CacheUtil=u},8859:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.toGroupModel=function(t,e){var r={};return t.forEach((function(t){var n=e(t);if(null!=n){var o=(n+"").trim();r.hasOwnProperty(o)||(r[o]=[]),r[o].push(t)}})),r},t.toGroupItems=function(t,e,r,n){var o=[];return t.forEach((function(t){var r=e(t);if(null!=r){var i=(r+"").trim(),a=o.find((function(t){return t.key==i}));a||(a={key:i,values:[],children:n?[]:void 0},o.push(a)),a.values.push(t)}})),n&&r&&o.forEach((function(t){var e=t.values.flatMap((function(t){return r(t)||[]})).toGroupItems(n);t.children=e})),o},t}();e.DataGroupUtil=r},1204:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(r(9907)),i=r(8932),a=function(){function t(){}return t.registerData=function(t,e){var r=null!=e?e:i.UuidUtil.uuidv4();return this.dataStore[r]=o.default(t),r},t.isDataChanged=function(t,e){var r=this.dataStore[t];if(!r)throw"this data is not registered";return JSON.stringify(r)!=JSON.stringify(o.default(e))},t.dataStore={},t}();e.DataTrackerUtil=a},5545:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.removeSecondFromTimeSpan=function(t){if(t.indexOf(":")>-1){var e=t.split(":");if(3==e.length)return e[0]+":"+e[1]+":00"}return""},t.timeFormatFromApiDateString=function(t,e){if(t){var r=new Date(t);if(r)return this.timeFormat(r,e)}return""},t.dateTimeFormatFromApiDateString=function(t){if(t){var e=new Date(t);if(e)return this.dateTimeFormat(e)}return""},t.dateTimeFormat=function(t){if(t){var e=t.getDate();e<=9&&(e="0"+e);var r=t.getMonth()+1;r<=9&&(r="0"+r);var n=t.getHours();n<=9&&(n="0"+n);var o=t.getMinutes();return o<=9&&(o="0"+o),e+"."+r+"."+t.getFullYear()+" "+n+":"+o}return""},t.dateFormatFromApiDateString=function(t){if(t){var e=new Date(t);if(e)return this.dateFormat(e)}return""},t.dateFormat=function(t){if(t){var e=t.getDate();e<=9&&(e="0"+e);var r=t.getMonth()+1;return r<=9&&(r="0"+r),e+"."+r+"."+t.getFullYear()}return""},t.timeFormat=function(t,e){if(t){var r=t.getHours();r<=9&&(r="0"+r);var n=t.getMinutes();n<=9&&(n="0"+n);var o=t.getSeconds();return o<=9&&(o="0"+o),r+":"+n+(e?":"+o:"")}return""},t.stringToDate=function(t){var e;if((t=t.trim()).indexOf(".")>-1){var r=t.split(".");if(3==r.length){var n=0,o=0;if(r[2]&&r[2].indexOf(":")>-1){var i=r[2].split(" ");if(2==i.length){var a=i[1].split(":");a.length>1&&(n=parseInt(a[0]),o=parseInt(a[1]))}}var u=parseInt(r[2]),c=parseInt(r[1])-1,s=parseInt(r[0]);c<=12&&s<=31&&n<=23&&o<=59&&(e=new Date(u,c,s,n,o))}}return e},t.dateFormatToApiDate=function(t){if(this.checkDateStringFormatValidity(t)){var e=this.stringToDate(t);if(e&&this.checkDateValidity(e))return this.dateToApiDate(e)}return""},t.checkDateValidity=function(t){return t&&t instanceof Date&&!isNaN(t.getTime())},t.checkApiStringValidity=function(t){var e=new RegExp(/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/g);return t&&e.test(t)},t.checkDateStringFormatValidity=function(t){var e=this.stringToDate(t);return e&&this.checkDateValidity(e)},t.checkTimeStringFormatValidity=function(t){return!(!t||-1==t.indexOf(":"))&&t.split(":").length>1},t.now=function(){return new Date},t.nowApi=function(t){return this.dateToApiDate(this.now(),t)},t.dateToApiDate=function(t,e,r){var n="";if(t){var o=t.getFullYear(),i=t.getMonth();i+=1;var a=t.getDate(),u=e?0:t.getHours(),c=e?0:t.getMinutes();i<=9&&(i="0"+i),a<=9&&(a="0"+a),u<=9&&(u="0"+u),c<=9&&(c="0"+c),n=o+"-"+i+"-"+a+"T"+u+":"+c+":00"}return n},t.apiDateToTimeSpan=function(t){if(!t)return"";var e=new Date(t);return this.dateToTimeSpan(e)},t.dateToTimeSpan=function(t){var e="";if(t){var r=t.getHours(),n=t.getMinutes(),o=t.getSeconds();r<=9&&(r="0"+r),n<=9&&(n="0"+n),o<=9&&(o="0"+o),e=r+":"+n+":"+o}return e},t.timeToHourAndMinute=function(t){if(!t)return t;var e=t.split(":");return e&&3==e.length?e[0]+":"+e[1]:""},t.setTimeOfApiDateString=function(t,e){var r=e.split(":");if(r.length>1){var n=parseInt(r[0]),o=parseInt(r[1]),i=new Date(t);return i.setHours(n),i.setMinutes(o),this.dateToApiDate(i)}},t.addDaysToString=function(t,e){var r=this.stringToDate(t);return r?(r.setDate(r.getDate()+e),this.dateFormat(r)):""},t.addDaysToApiString=function(t,e){t=t;var r=new Date(t);return r&&r instanceof Date&&!isNaN(r)&&r.setDate(r.getDate()+e),this.dateToApiDate(r)},t.addMonthsToApiString=function(t,e){t=t;var r=new Date(t);return r&&r instanceof Date&&!isNaN(r)&&r.setMonth(r.getMonth()+e),this.dateToApiDate(r)},t.addYearsToApiString=function(t,e){t=t;var r=new Date(t);return r&&r instanceof Date&&!isNaN(r)&&r.setFullYear(r.getFullYear()+e),this.dateToApiDate(r)},t.timeBetweenTwoDate=function(t,e){var r=t.getTime();return e.getTime()-r},t.minutesBetweenTwoDate=function(t,e){return this.timeBetweenTwoDate(t,e)/6e4},t.hoursBetweenTwoDate=function(t,e){return this.minutesBetweenTwoDate(t,e)/60},t.daysBetweenTwoDate=function(t,e){var r=this.timeBetweenTwoDate(t,e);return Math.round(r/864e5)},t.yearsBetweenTwoDate=function(t,e){var r=t.getTime(),n=e.getTime()-r;return Math.round(n/31536e6)},t.daysBetweenTwoApiDate=function(t,e){var r=new Date(t),n=new Date(e);if(!r||!n)return 0;var o=r.getTime(),i=n.getTime()-o;return Math.round(i/864e5)},t.daysBetweenTwoStringDate=function(t,e){var r=this.stringToDate(t),n=this.stringToDate(e);if(!r||!n)return 0;var o=r.getTime(),i=n.getTime()-o;return Math.round(i/864e5)},t.daysTillTodayString=function(t){var e=this.stringToDate(t);if(!e)return 0;var r=new Date;r.setHours(0,0,0);var n=e.getTime(),o=r.getTime()-n;return Math.round(o/864e5)},t.howManyTimeAgoFromApiDate=function(t){if(t){var e=new Date(t);if(e)return this.howManyTimeAgo(e)}return""},t.howManyTimeAgo=function(t,e,r,n){void 0===e&&(e="day"),void 0===r&&(r="hour"),void 0===n&&(n="minute");var o=new Date,i=(t.getTime()-o.getTime())/6e4;if(i<0)return"";i=parseInt(i.toFixed(2));var a="",u=Math.floor(i/60),c=i%60;if(u>24){var s=Math.floor(u/24);u%=24,a=s+" "+e}return u>0&&(a+=u+" "+r+" "),c>0&&(a+=c+" "+n),a},t.getMondayOfCurrentWeek=function(t){var e=t.getDay();return new Date(t.getFullYear(),t.getMonth(),t.getDate()+(0==e?-6:1)-e)},t.getSundayOfCurrentWeek=function(t){var e=t.getDay();return new Date(t.getFullYear(),t.getMonth(),t.getDate()+(0==e?0:7)-e)},t.hoursBetweenTwoStringDate=function(t,e){if(!t||!e)return"-";var r=new Date(t),n=new Date(e),o=Math.floor(this.hoursBetweenTwoDate(r,n));return o>0?o.toString():"-"},t}();e.DateUtil=r},6256:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.toFixedNumber=function(t,e){if(null==t||isNaN(t))return 0;var r=t.toFixed(null!=e?e:2);return parseFloat(r)},t}();e.DecimalUtil=r},6162:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(6863),o=function(){function t(){}return t.findParentElement=function(t,e,r){if(!e&&!r)return null;for(var n=t.parentElement;n&&!(r&&n.getAttribute("id")==r||e&&n.classList&&n.classList.contains(e));)n=n.parentElement;return n},t.randomColor=function(){return"rgb("+Math.floor(255*Math.random())+","+Math.floor(255*Math.random())+","+Math.floor(255*Math.random())+")"},t.touchPositionInelement=function(t,e){var r=n.PositionCalculaterUtil.offset(e),o=t.touches[0];return{x:o.clientX-r.left,y:o.clientY-r.top}},t.checkIsAtTheBottom=function(t){return t.offsetHeight+t.scrollTop+t.margin>=t.scrollHeight},t.handleInfineteScroll=function(e,r,n){void 0===n&&(n=20);var o=0;e.addEventListener("scroll",(function(i){var a=e.scrollTop,u=e.offsetHeight,c=e.scrollHeight,s=a>o;t.checkIsAtTheBottom({scrollHeight:c,scrollTop:a,offsetHeight:u,margin:n})&&s&&r(a),o=a}))},t}();e.DomUtil=o},9870:function(t,e,r){"use strict";var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function u(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,u)}c((n=n.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(8859),a=function(){function t(){this.remove(),this.last(),this.findRemove(),this.sum(),this.pushIf(),this.pushRange(),this.forEachAsync(),this.toGroupModel(),this.toGroupModelValues(),this.toGroupItems(),this.distinct()}return t.prototype.last=function(){Array.prototype.last||Object.defineProperty(Array.prototype,"last",{value:function(){if(this.length>0)return this[this.length-1]},enumerable:!1,configurable:!0})},t.prototype.remove=function(){Array.prototype.remove||Object.defineProperty(Array.prototype,"remove",{value:function(t){var e=this.indexOf(t);return e>-1&&this.splice(e,1),e},enumerable:!1,configurable:!0})},t.prototype.findRemove=function(){Array.prototype.findRemove||Object.defineProperty(Array.prototype,"findRemove",{value:function(t){var e=this;if(t){var r=this.filter(t);r.length>0&&r.forEach((function(t){e.remove(t)}))}},enumerable:!1,configurable:!0})},t.prototype.pushIf=function(){Array.prototype.pushIf||Object.defineProperty(Array.prototype,"pushIf",{value:function(t,e){e(this)&&this.push(t)},enumerable:!1,configurable:!0})},t.prototype.pushRange=function(){Array.prototype.pushRange||Object.defineProperty(Array.prototype,"pushRange",{value:function(t,e){for(var r=0,n=t.length;r<n;r++)e&&!e(t[r])||this.push(t[r])},enumerable:!1,configurable:!0})},t.prototype.forEachAsync=function(){Array.prototype.forEachAsync||Object.defineProperty(Array.prototype,"forEachAsync",{value:function(t){return n(this,void 0,void 0,(function(){var e;return o(this,(function(r){switch(r.label){case 0:e=0,r.label=1;case 1:return e<this.length?[4,t(this[e],e,this)]:[3,4];case 2:r.sent(),r.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},enumerable:!1,configurable:!0})},t.prototype.toGroupModel=function(){Array.prototype.toGroupModel||Object.defineProperty(Array.prototype,"toGroupModel",{value:function(t){return i.DataGroupUtil.toGroupModel(this,t)},enumerable:!1,configurable:!0})},t.prototype.toGroupItems=function(){Array.prototype.toGroupItems||Object.defineProperty(Array.prototype,"toGroupItems",{value:function(t,e,r){return i.DataGroupUtil.toGroupItems(this,t,e,r)},enumerable:!1,configurable:!0})},t.prototype.toGroupModelValues=function(){Array.prototype.toGroupModelValues||Object.defineProperty(Array.prototype,"toGroupModelValues",{value:function(t){return Object.values(this.toGroupModel(t))},enumerable:!1,configurable:!0})},t.prototype.sum=function(){Array.prototype.sum||Object.defineProperty(Array.prototype,"sum",{value:function(t){for(var e=0,r=0,n=this.length;r<n;r++)e+=t(this[r]);return e},enumerable:!1,configurable:!0})},t.prototype.distinct=function(){Array.prototype.distinct||Object.defineProperty(Array.prototype,"distinct",{value:function(){return this.filter((function(t,e,r){return r.indexOf(t)===e}))},enumerable:!1,configurable:!0})},t}();e.ExtendArray=a},8878:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(9870);e.ExtendArray=n.ExtendArray},4482:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(5545),o=r(4192),i=function(){function t(){}return t.compareFn=function(t,e,r){var i=e(t);if(r=r.trim().toLocaleLowerCase(o.BrowserLanguageUtil.getBrowserLang()),"string"==typeof i){if(n.DateUtil.checkApiStringValidity(i)){var a=new Date(i);return a.setHours(0,0,0,0),n.DateUtil.dateToApiDate(a)==r.toLowerCase()}return i.toLocaleLowerCase(o.BrowserLanguageUtil.getBrowserLang()).indexOf(r)>-1}return i==r},t.filter=function(e,r,n){return e.filter((function(e){return t.compareFn(e,r,n)}))},t}();e.FilterUtil=i},4340:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(2253),o=function(){function t(){}return t.isKeyAvailableOnNumberInput=function(t,e,r,o){if(void 0===o&&(o="."),t.key==n.EnumKeyboardKey.Enter)return!0;var i=t.target.value,a=!isNaN(t.key),u=t.target.selectionStart;if(r&&t.key==n.EnumKeyboardKey.Minus){if(0!=parseFloat(i)&&-1==i.indexOf("-")&&0==u)return!0;t.preventDefault()}else if(e||t.key!=o){if(a)return!0;t.preventDefault()}else{if(-1==i.indexOf(o))return!0;t.preventDefault()}},t}();e.InputUtil=o},2253:(t,e)=>{"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),(r=e.EnumKeyboardKey||(e.EnumKeyboardKey={})).ArrowUp="ArrowUp",r.ArrowDown="ArrowDown",r.ArrowRight="ArrowRight",r.ArrowLeft="ArrowLeft",r.Backspace="Backspace",r.Enter="Enter",r.Space=" ",r.Dot=".",r.Minus="-"},8350:function(t,e){"use strict";var r=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function u(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,u)}c((n=n.apply(t,e||[])).next())}))},n=this&&this.__generator||function(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};function o(t,e,o){return function(i,a,u){var c=u.value;return u.value=function(){for(var i=[],a=0;a<arguments.length;a++)i[a]=arguments[a];return r(this,void 0,void 0,(function(){var r,a;return n(this,(function(n){switch(n.label){case 0:return[4,c.apply(this,i)];case 1:return(r=n.sent())?(a=void 0,e&&r instanceof Array?[4,Promise.all(r.map(t))]:[3,3]):[3,6];case 2:return a=n.sent(),[3,5];case 3:return[4,t(r)];case 4:a=n.sent(),n.label=5;case 5:return o&&o(r,a),[2,a];case 6:return[2]}}))}))},u}}Object.defineProperty(e,"__esModule",{value:!0}),e.mapToArray=function(t,e){return o(t,!0,e)},e.mapTo=function(t,e){return o(t,!1,e)}},4610:(t,e)=>{"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),(r=e.InvalidPositionState||(e.InvalidPositionState={}))[r.biggerThenScreen=1]="biggerThenScreen",r[r.outOfScreen=2]="outOfScreen",r[r.collidesWithBannedAre=3]="collidesWithBannedAre";var n=function(){function t(){}return t.offset=function(t){var e=t.getBoundingClientRect(),r=window.pageXOffset||document.documentElement.scrollLeft,n=window.pageYOffset||document.documentElement.scrollTop;return{top:e.top+n,left:e.left+r}},t.createDimensions=function(t){var e=this.offset(t);return{left:e.left,top:e.top,height:t.offsetHeight,width:t.offsetWidth}},t.isDimensionOutOfScreen=function(t){var e={left:0,top:0,right:0,bottom:0},r=window.innerHeight+window.pageYOffset,n=window.innerWidth+window.pageXOffset;return t.left-this.outPositionTolerance<window.pageXOffset&&(e.left=window.pageXOffset-(t.left-this.outPositionTolerance)),t.left+t.width+this.outPositionTolerance>n&&(e.right=t.left+t.width+this.outPositionTolerance-n),t.top-this.outPositionTolerance<window.pageYOffset&&(e.top=window.pageYOffset-(t.top-this.outPositionTolerance)),t.top+t.height+this.outPositionTolerance>r&&(e.bottom=t.top+t.height+this.outPositionTolerance-r),e},t.horizontalCenter=function(t,e){e.left=t.left-(e.width-t.width)/2},t.verticalCenter=function(t,e){e.top=t.top-(e.height-t.height)/2},t.shiftToFitScreen=function(t,e){e.top&&(t.top+=e.top+this.outPositionTolerance),e.bottom&&(t.top-=e.bottom+this.outPositionTolerance),e.right&&(t.left-=e.right+this.outPositionTolerance),e.left&&(t.left+=e.left+this.outPositionTolerance)},t.snapToBottom=function(t,e,r){e.top=t.top+t.height,this.horizontalCenter(t,e);var n=this.isDimensionOutOfScreen(e);if(n.left&&(e.left+=n.left+this.outPositionTolerance),n.right&&(e.left-=n.right+this.outPositionTolerance),n.bottom&&r){var o=this.snapToTop(t,e,!1);o.top&&this.shiftToFitScreen(e,o)}return n},t.snapToTop=function(t,e,r){e.top=t.top-e.height,this.horizontalCenter(t,e);var n=this.isDimensionOutOfScreen(e);if(n.left&&(e.left+=n.left+this.outPositionTolerance),n.right&&(e.left-=n.right+this.outPositionTolerance),n.top&&r){var o=this.snapToBottom(t,e,!1);o.bottom&&this.shiftToFitScreen(e,o)}return n},t.snapToLeft=function(t,e,r){this.verticalCenter(t,e),e.left=t.left-e.width;var n=this.isDimensionOutOfScreen(e);if(n.top&&(e.top+=n.top+this.outPositionTolerance),n.bottom&&(e.top-=n.bottom+this.outPositionTolerance),n.left&&r){var o=this.snapToRight(t,e,!1);o.right&&this.shiftToFitScreen(e,o)}return n},t.snapToRight=function(t,e,r){this.verticalCenter(t,e),e.left=t.left+t.width;var n=this.isDimensionOutOfScreen(e);if(n.top&&(e.top+=n.top+this.outPositionTolerance),n.bottom&&(e.top-=n.bottom+this.outPositionTolerance),n.right&&r){var o=this.snapToLeft(t,e,!1);o.left&&this.shiftToFitScreen(e,o)}return n},t.outPositionTolerance=20,t}();e.PositionCalculaterUtil=n},3252:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(r(9907)),i=r(5545),a=r(4192),u=function(){function t(){}return t.compareFn=function(e,r,n,u){var c,s;void 0===u&&(u=!1);var l=o.default(e),f=o.default(r),h=null!=(c=n(l))?c:t.undefinedSortValue,p=null!=(s=n(f))?s:t.undefinedSortValue;if("string"==typeof h&&"string"==typeof p){var d=new Date(h),g=new Date(p);if(i.DateUtil.checkDateValidity(d)&&i.DateUtil.checkDateValidity(g))return this.sortNumberOrDate(d,g,u);h=h.toLocaleLowerCase(a.BrowserLanguageUtil.getBrowserLang()),p=p.toLocaleLowerCase(a.BrowserLanguageUtil.getBrowserLang());var y=h.localeCompare(p,a.BrowserLanguageUtil.getBrowserLang());return u?-1*y:y}if(Number(h)&&Number(p))return this.sortNumberOrDate(h,p,u);if(u){if(h<p)return 1;if(h>p)return-1}else{if(h>p)return 1;if(h<p)return-1}return 0},t.sortNumberOrDate=function(t,e,r){if(r){if(t<e)return 1;if(t>e)return-1}else{if(t>e)return 1;if(t<e)return-1}return 0},t.undefinedSortValue="-999999999",t}();e.SortUtil=u},8932:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.uuidv4=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))},t}();e.UuidUtil=r},9907:(t,e,r)=>{t=r.nmd(t);var n="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",a="[object Boolean]",u="[object Date]",c="[object Function]",s="[object GeneratorFunction]",l="[object Map]",f="[object Number]",h="[object Object]",p="[object Promise]",d="[object RegExp]",g="[object Set]",y="[object String]",v="[object Symbol]",m="[object WeakMap]",b="[object ArrayBuffer]",w="[object DataView]",_="[object Float32Array]",T="[object Float64Array]",S="[object Int8Array]",D="[object Int16Array]",O="[object Int32Array]",A="[object Uint8Array]",M="[object Uint8ClampedArray]",x="[object Uint16Array]",j="[object Uint32Array]",U=/\w*$/,P=/^\[object .+?Constructor\]$/,C=/^(?:0|[1-9]\d*)$/,E={};E[i]=E["[object Array]"]=E[b]=E[w]=E[a]=E[u]=E[_]=E[T]=E[S]=E[D]=E[O]=E[l]=E[f]=E[h]=E[d]=E[g]=E[y]=E[v]=E[A]=E[M]=E[x]=E[j]=!0,E["[object Error]"]=E[c]=E[m]=!1;var I="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,F="object"==typeof self&&self&&self.Object===Object&&self,L=I||F||Function("return this")(),k=e&&!e.nodeType&&e,B=k&&t&&!t.nodeType&&t,G=B&&B.exports===k;function N(t,e){return t.set(e[0],e[1]),t}function V(t,e){return t.add(e),t}function R(t,e,r,n){var o=-1,i=t?t.length:0;for(n&&i&&(r=t[++o]);++o<i;)r=e(r,t[o],o,t);return r}function H(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}function K(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function Y(t,e){return function(r){return t(e(r))}}function $(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}var W,J=Array.prototype,z=Function.prototype,X=Object.prototype,Z=L["__core-js_shared__"],q=(W=/[^.]+$/.exec(Z&&Z.keys&&Z.keys.IE_PROTO||""))?"Symbol(src)_1."+W:"",Q=z.toString,tt=X.hasOwnProperty,et=X.toString,rt=RegExp("^"+Q.call(tt).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),nt=G?L.Buffer:void 0,ot=L.Symbol,it=L.Uint8Array,at=Y(Object.getPrototypeOf,Object),ut=Object.create,ct=X.propertyIsEnumerable,st=J.splice,lt=Object.getOwnPropertySymbols,ft=nt?nt.isBuffer:void 0,ht=Y(Object.keys,Object),pt=Lt(L,"DataView"),dt=Lt(L,"Map"),gt=Lt(L,"Promise"),yt=Lt(L,"Set"),vt=Lt(L,"WeakMap"),mt=Lt(Object,"create"),bt=Vt(pt),wt=Vt(dt),_t=Vt(gt),Tt=Vt(yt),St=Vt(vt),Dt=ot?ot.prototype:void 0,Ot=Dt?Dt.valueOf:void 0;function At(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Mt(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function xt(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function jt(t){this.__data__=new Mt(t)}function Ut(t,e,r){var n=t[e];tt.call(t,e)&&Rt(n,r)&&(void 0!==r||e in t)||(t[e]=r)}function Pt(t,e){for(var r=t.length;r--;)if(Rt(t[r][0],e))return r;return-1}function Ct(t,e,r,n,o,p,m){var P;if(n&&(P=p?n(t,o,p,m):n(t)),void 0!==P)return P;if(!Wt(t))return t;var C=Ht(t);if(C){if(P=function(t){var e=t.length,r=t.constructor(e);return e&&"string"==typeof t[0]&&tt.call(t,"index")&&(r.index=t.index,r.input=t.input),r}(t),!e)return function(t,e){var r=-1,n=t.length;for(e||(e=Array(n));++r<n;)e[r]=t[r];return e}(t,P)}else{var I=Bt(t),F=I==c||I==s;if(Yt(t))return function(t,e){if(e)return t.slice();var r=new t.constructor(t.length);return t.copy(r),r}(t,e);if(I==h||I==i||F&&!p){if(H(t))return p?t:{};if(P=function(t){return"function"!=typeof t.constructor||Nt(t)?{}:Wt(e=at(t))?ut(e):{};var e}(F?{}:t),!e)return function(t,e){return It(t,kt(t),e)}(t,function(t,e){return t&&It(e,Jt(e),t)}(P,t))}else{if(!E[I])return p?t:{};P=function(t,e,r,n){var o,i=t.constructor;switch(e){case b:return Et(t);case a:case u:return new i(+t);case w:return function(t,e){var r=e?Et(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}(t,n);case _:case T:case S:case D:case O:case A:case M:case x:case j:return function(t,e){var r=e?Et(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}(t,n);case l:return function(t,e,r){return R(e?r(K(t),!0):K(t),N,new t.constructor)}(t,n,r);case f:case y:return new i(t);case d:return function(t){var e=new t.constructor(t.source,U.exec(t));return e.lastIndex=t.lastIndex,e}(t);case g:return function(t,e,r){return R(e?r($(t),!0):$(t),V,new t.constructor)}(t,n,r);case v:return o=t,Ot?Object(Ot.call(o)):{}}}(t,I,Ct,e)}}m||(m=new jt);var L=m.get(t);if(L)return L;if(m.set(t,P),!C)var k=r?function(t){return function(t,e,r){var n=e(t);return Ht(t)?n:function(t,e){for(var r=-1,n=e.length,o=t.length;++r<n;)t[o+r]=e[r];return t}(n,r(t))}(t,Jt,kt)}(t):Jt(t);return function(t,e){for(var r=-1,n=t?t.length:0;++r<n&&!1!==e(t[r],r););}(k||t,(function(o,i){k&&(o=t[i=o]),Ut(P,i,Ct(o,e,r,n,i,t,m))})),P}function Et(t){var e=new t.constructor(t.byteLength);return new it(e).set(new it(t)),e}function It(t,e,r,n){r||(r={});for(var o=-1,i=e.length;++o<i;){var a=e[o],u=n?n(r[a],t[a],a,r,t):void 0;Ut(r,a,void 0===u?t[a]:u)}return r}function Ft(t,e){var r,n,o=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof e?"string":"hash"]:o.map}function Lt(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!Wt(t)||(e=t,q&&q in e))&&($t(t)||H(t)?rt:P).test(Vt(t));var e}(r)?r:void 0}At.prototype.clear=function(){this.__data__=mt?mt(null):{}},At.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},At.prototype.get=function(t){var e=this.__data__;if(mt){var r=e[t];return r===n?void 0:r}return tt.call(e,t)?e[t]:void 0},At.prototype.has=function(t){var e=this.__data__;return mt?void 0!==e[t]:tt.call(e,t)},At.prototype.set=function(t,e){return this.__data__[t]=mt&&void 0===e?n:e,this},Mt.prototype.clear=function(){this.__data__=[]},Mt.prototype.delete=function(t){var e=this.__data__,r=Pt(e,t);return!(r<0||(r==e.length-1?e.pop():st.call(e,r,1),0))},Mt.prototype.get=function(t){var e=this.__data__,r=Pt(e,t);return r<0?void 0:e[r][1]},Mt.prototype.has=function(t){return Pt(this.__data__,t)>-1},Mt.prototype.set=function(t,e){var r=this.__data__,n=Pt(r,t);return n<0?r.push([t,e]):r[n][1]=e,this},xt.prototype.clear=function(){this.__data__={hash:new At,map:new(dt||Mt),string:new At}},xt.prototype.delete=function(t){return Ft(this,t).delete(t)},xt.prototype.get=function(t){return Ft(this,t).get(t)},xt.prototype.has=function(t){return Ft(this,t).has(t)},xt.prototype.set=function(t,e){return Ft(this,t).set(t,e),this},jt.prototype.clear=function(){this.__data__=new Mt},jt.prototype.delete=function(t){return this.__data__.delete(t)},jt.prototype.get=function(t){return this.__data__.get(t)},jt.prototype.has=function(t){return this.__data__.has(t)},jt.prototype.set=function(t,e){var r=this.__data__;if(r instanceof Mt){var n=r.__data__;if(!dt||n.length<199)return n.push([t,e]),this;r=this.__data__=new xt(n)}return r.set(t,e),this};var kt=lt?Y(lt,Object):function(){return[]},Bt=function(t){return et.call(t)};function Gt(t,e){return!!(e=null==e?o:e)&&("number"==typeof t||C.test(t))&&t>-1&&t%1==0&&t<e}function Nt(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||X)}function Vt(t){if(null!=t){try{return Q.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Rt(t,e){return t===e||t!=t&&e!=e}(pt&&Bt(new pt(new ArrayBuffer(1)))!=w||dt&&Bt(new dt)!=l||gt&&Bt(gt.resolve())!=p||yt&&Bt(new yt)!=g||vt&&Bt(new vt)!=m)&&(Bt=function(t){var e=et.call(t),r=e==h?t.constructor:void 0,n=r?Vt(r):void 0;if(n)switch(n){case bt:return w;case wt:return l;case _t:return p;case Tt:return g;case St:return m}return e});var Ht=Array.isArray;function Kt(t){return null!=t&&function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=o}(t.length)&&!$t(t)}var Yt=ft||function(){return!1};function $t(t){var e=Wt(t)?et.call(t):"";return e==c||e==s}function Wt(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function Jt(t){return Kt(t)?function(t,e){var r=Ht(t)||function(t){return function(t){return function(t){return!!t&&"object"==typeof t}(t)&&Kt(t)}(t)&&tt.call(t,"callee")&&(!ct.call(t,"callee")||et.call(t)==i)}(t)?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],n=r.length,o=!!n;for(var a in t)!e&&!tt.call(t,a)||o&&("length"==a||Gt(a,n))||r.push(a);return r}(t):function(t){if(!Nt(t))return ht(t);var e=[];for(var r in Object(t))tt.call(t,r)&&"constructor"!=r&&e.push(r);return e}(t)}t.exports=function(t){return Ct(t,!0,!0)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,