(globalThis.webpackChunkauth=globalThis.webpackChunkauth||[]).push([[910,388],{3936:(e,t,r)=>{"use strict";r.d(t,{d:()=>s,T:()=>o});const s={url:"signIn"},o={url:"signOut"}},7743:(e,t,r)=>{"use strict";r.d(t,{Q:()=>c});var s=r(6878),o=r(2482),n=r(8064),a=function(e,t,r,s){var o,n=arguments.length,a=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,r):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,s);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(a=(n<3?o(a):n>3?o(t,r,a):o(t,r))||a);return n>3&&a&&Object.defineProperty(t,r,a),a};let c=class{provider;cache;httpClient;cacheKey="signInResponse";authHeaderKey="x-authentication-token";id=Math.random();constructor(e){this.provider=e,console.log("constructor => this.cache",this.cache),this.initTokenFromCache()}get response(){return this.cache.get(this.cacheKey)}get currentUser(){return this.response.credential}async signIn(e){const t=await this.provider.signIn(e);return this.useResponse(t),t}async signOut(){const e=this.response?.token;if(e){if(!await this.provider.signOut({token:e}))throw new Error("Sign out failed");this.removeCache(),this.removeAuthToken()}}useResponse(e){this.cacheResponse(e),this.setAuthToken(e.token)}cacheResponse(e){this.cache.set(this.cacheKey,e)}initTokenFromCache(){const e=this.response;e&&this.setAuthToken(e.token)}setAuthToken(e){this.httpClient.setHeader(this.authHeaderKey,e),s.globalModule.addToSharedHeaders({[this.authHeaderKey]:e})}removeCache(){this.cache.remove(this.cacheKey)}removeAuthToken(){this.httpClient.setHeader(this.authHeaderKey,""),s.globalModule.removeSharedHeaders(this.authHeaderKey)}};a([n.D.cache(s.SessionStorageCache)],c.prototype,"cache",void 0),a([n.D.client()],c.prototype,"httpClient",void 0),c=a([n.b.controller({provider:o.H})],c);const i=new c;console.log(i.cache)},2482:(e,t,r)=>{"use strict";r.d(t,{H:()=>a});var s=r(8064),o=r(7158),n=r(3936);let a=class extends o.Z{baseUrl="core/auth";signIn(e){return this.post(n.d,e)}signOut(e){return this.post(n.T,e)}};a=function(e,t,r,s){var o,n=arguments.length,a=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,r):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,s);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(a=(n<3?o(a):n>3?o(t,r,a):o(t,r))||a);return n>3&&a&&Object.defineProperty(t,r,a),a}([s.b.provider()],a)},9910:(e,t,r)=>{"use strict";r.r(t),r.d(t,{authModule:()=>s.authModule,AuthController:()=>o.Q,AuthProvider:()=>n.H});var s=r(4388),o=r(7743),n=r(2482)},8064:(e,t,r)=>{"use strict";r.d(t,{D:()=>o,b:()=>n});var s=r(6878);const o=new s.ResolveDecorators,n=new s.InjectableDecorators},4388:(e,t,r)=>{"use strict";r.r(t),r.d(t,{authModule:()=>a});var s=r(6878),o=r(8064);class n extends s.CoreModule{id=Math.random()}const a=new n;a.registerCache(s.SessionStorageCache),a.registerHttpClient(s.FetchHTTPClient,{hostName:"api.comed.com.tr",languagePrefix:"tr-tr",prefix:"api/json",headers:{"x-application-key":"/uq+fiM1AzYe7bHAJCixzg==","content-type":"application/json"}}),a.useDecorators(o.b,o.D)},7158:(e,t,r)=>{"use strict";r.d(t,{Z:()=>o});var s=r(6878);class o extends s.CoreProvider{async post(e,t,r){return(await super.post(e,t,r)).data}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,